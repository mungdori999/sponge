package com.petweb.sponge.post.mock;

import com.petweb.sponge.post.domain.post.Post;
import com.petweb.sponge.post.repository.post.PostRepository;

import java.util.List;
import java.util.Optional;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.atomic.AtomicLong;

public class MockPostRepository implements PostRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Post> postData = new CopyOnWriteArrayList<>();

    @Override
    public Optional<Post> findById(Long id) {
        return postData.stream().filter(item -> item.getId().equals(id)).findAny();
    }

    @Override
    public Optional<Post> findShortById(Long id) {
        return postData.stream().filter(item -> item.getId().equals(id)).findAny();
    }

    @Override
    public List<Post> findListByUserId(Long userId, int page) {
        return null;
    }

    @Override
    public List<Post> findByKeyword(String keyword, int page) {
        return null;
    }

    @Override
    public List<Post> findListByCode(Long categoryCode, int page) {
        return null;
    }

    @Override
    public Post save(Post post) {
        return null;
    }

    @Override
    public void delete(Post post, Long loginId) {

    }

    @Override
    public void initPost(Long id) {

    }

    @Override
    public List<Post> findByBookmark(Long loginId, int page) {
        return null;
    }
}
