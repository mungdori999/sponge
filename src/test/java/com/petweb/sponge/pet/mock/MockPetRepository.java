package com.petweb.sponge.pet.mock;

import com.petweb.sponge.pet.domain.Pet;
import com.petweb.sponge.pet.service.port.PetRepository;

import java.util.*;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.Predicate;

public class MockPetRepository implements PetRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Pet> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public Optional<Pet> findById(Long id) {
        return data.stream().filter(item -> item.getId().equals(id)).findAny();
    }

    @Override
    public List<Pet> findAllByUserId(Long loginId) {
        return null;
    }

    @Override
    public Pet save(Pet pet) {
        if (pet.getId() == null || pet.getId() == 0) {
            Pet newPet = Pet.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .name(pet.getName())
                    .breed(pet.getBreed())
                    .gender(pet.getGender())
                    .age(pet.getAge())
                    .weight(pet.getWeight())
                    .petImgUrl(pet.getPetImgUrl())
                    .userId(pet.getUserId()).build();
            data.add(newPet);
            return newPet;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), pet.getId()));
            data.add(pet);
            return pet;
        }
    }

    @Override
    public void delete(Pet pet) {
        data.removeIf(item -> Objects.equals(item.getId(), pet.getId()));
    }
}
